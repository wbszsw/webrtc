
'use strict'

var http = require('http');
var https = require('https');
var fs = require('fs');

// var express= require('express');

var serveIndex=require('serve-index');

var USERCOUNT=3;

// var path = require('path');
// var cookieParser = require('cookie-parser');
// var logger = require('morgan');
//命令服务器
var socketIo =require('socket.io');
var log4js = require('log4js');



var app = require('../app.js')

// view engine setup
// console.log(__dirname)
// app.set('views', path.join('/home/rtc4/', 'views'));
// app.set('view engine', 'ejs');

// app.use(logger('dev'));
// app.use(express.json());
// app.use(express.urlencoded({ extended: false }));
// app.use(cookieParser());
// app.use(express.static(path.join('/home/rtc4/', 'public')));

// server.listen(1024, function () {
//     console.log('Socket Open')
// });


// app.all('*', function(req, res, next) {  
//   res.header("Access-Control-Allow-Origin", "*");  
  
//   // 'Authorization, Origin, X-Requested-With, Content-Type, Accept'
//   res.header("Access-Control-Allow-Headers", 'Origin, X-Requested-With, Content-Type, Accept, Authorization');  
//   res.header("Access-Control-Allow-Methods","PUT,POST,GET,DELETE,OPTIONS,HEAD");  
//   // res.header("authorization", '*');  
//     // res.header("Content-Type", "application/json;charset=utf-8");  
//   if (req.method == 'options' || req.method == 'OPTIONS') {
//       console.log('options这里')
//       // res.send(200)
//       res.status(200).json('返回成功');
//   }  
//   next();  
// }); 
// app.use('/', indexRouter);
// app.use('/users', usersRouter);

// // catch 404 and forward to error handler
// app.use(function(req, res, next) {
//   next(createError(404));
// });

// // error handler
// app.use(function(err, req, res, next) {
//   // set locals, only providing error in development
//   res.locals.message = err.message;
//   res.locals.error = req.app.get('env') === 'development' ? err : {};

//   // render the error page
//   res.status(err.status || 500);
//   res.render('error');
// });

log4js.configure({
	appenders:{
		file:{
			type:'file',
			filename:'app.log',
			layout:{
				type:'pattern',
				pattern:'%r %p - %m',
			}
		}
	},
	categories:{
		default:{
			appenders:['file'],
			level:'debug'
		}
	}
});
var logger = log4js.getLogger();



// var app=express();
// app.use(serveIndex('./public'));
// app.use(express.static('./public'));

//http  server
var http_server=http.createServer(app);

//-----------------------------------------------------------------------//

const options = {
  key: fs.readFileSync('./cert/key.pem'),
  cert: fs.readFileSync('./cert/cert.pem')
};

//https server
var https_server=https.createServer(options,app);

//命令服务器绑定https
var io = socketIo(https_server)

io.sockets.on('connection',(socket)=>{
	logger.debug("connection");
	console.log('开始connect')
	//转发信息
	socket.on('message', (room, data)=>{
    console.log('message data',data)
		logger.debug("message data "+socket.id+" "+room,data);
		// socket.to(room).emit('message', room, socket.id, data)//房间内所有人,除自己外
		socket.in(room).emit('message', room, socket.id, data)//房间内所有人,除自己外

	});
  // 文字消息
  socket.on('textMsg',(room, data)=>{
		socket.to(room).emit('textMsg', room, socket.id, data)//房间内所有人,除自己外
		// socket.in(room).emit('textMsg', room, socket.id, data)//房间内所有人,除自己外
	});
	
	//用户加入
	socket.on('join',(room)=>{
    console.log('join',room)
		logger.debug("join",",room = ", room,",socket.id = ", socket.id);
		socket.join(room);
		// var myRoom = io.sockets.adapter.rooms[room];
		var myRoom = io.sockets.adapter.rooms.get(room)

    console.log('getRoom',io.sockets.adapter.rooms.length, io.sockets.adapter.rooms.get(room))
    console.log('nadaolme',io.sockets.adapter.rooms.get(room))

    // for(let item in io.sockets.adapter.rooms) {
    //   console.log('item',item)
    //   // if(item == room) {
    //   //   return
    //   // }
    // }
    // console.log('join',room,'qw')
    // console.log('socket',io.sockets.adapter.rooms[room],typeof(io.sockets.adapter.rooms))
		// var users =(myRoom)?Object.keys(myRoom.sockets).length:0;
		var users =(myRoom)?2:0;

    console.log('多少个users',users)
		logger.debug('the number of user in room is:'+users)
		
		//处理一对一通信
		if (users<USERCOUNT) {
			//给本人回信息
			socket.emit('joined',room,socket.id);
			if(users>1){
				socket.to(room).emit('otherjoin',room,socket.id);
			}
		}else{
			socket.leave(room);
			socket.emit('full',room,socket.id);
		}
		
		//给本人回信息
		//socket.emit('joined',room,socket.id);
		//给房间除自己以外所有人回
		// socket.to(room).emit('joined',room,socket.id);
		//给房间所有人回
		// io.in(room).emit('joined',room,socket.id);
		//除自己所有站点回
		// socket.broadcast.emit('joined',room,socket.id)
	});

	//用户离开
	socket.on('leave',(room)=>{
		var myRoom = io.sockets.adapter.rooms[room];
		var users =(myRoom)?Object.keys(myRoom.sockets).length:0;
		//users-1
		logger.debug('the number of user in room is:'+(users-1));
		
		socket.to(room).emit('bye',room,socket.id);
		socket.emit('leaved',room,socket.id);
		
		//给本人回信息
		//socket.emit('leaved',room,socket.id);
		//给房间除自己以外所有人回
		//socket.to(room).emit('leaved',room,socket.id)
		//给房间所有人回
		//io.in(room).emit('leaved',room,socket.id);
		//除自己所有站点回
		//socket.broadcast.emit('leaved',room,socket.id)
	});
});

https_server.listen(1114);
console.log('daimaxs')
http_server.listen(83);
